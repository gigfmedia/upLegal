// Enhanced legal domain understanding with context awareness

// Define document information interface
interface DocumentInfo {
  descripcion: string;
  requisitos: string[];
  consejos?: string[];
  marcoLegal: string;
  costoAproximado: string;
  validez: string;
}

// Define legal specialties information
interface EspecialidadLegal {
  descripcion: string;
  cuandoNecesitas: string[];
  consejos?: string[];
}

// Define legal specialties data
const ESPECIALIDADES_LEGALES: Record<string, EspecialidadLegal> = {
  'derecho de familia': {
    descripcion: '√Årea del derecho que regula las relaciones familiares, como divorcios, tuici√≥n de hijos, alimentos, entre otros.',
    cuandoNecesitas: [
      'Necesitas tramitar un divorcio de mutuo acuerdo o contencioso',
      'Requieres regular la relaci√≥n directa y regular con tus hijos',
      'Necesitas fijar o modificar una pensi√≥n de alimentos',
      'Buscas asesor√≠a sobre cuidado personal de menores',
      'Necesitas regular un r√©gimen de bienes en el matrimonio'
    ],
    consejos: [
      'Re√∫ne toda la documentaci√≥n relevante antes de la consulta',
      'Si hay menores involucrados, prioriza su bienestar en las decisiones',
      'Considera la mediaci√≥n familiar antes de iniciar un juicio',
      'Mant√©n un registro de gastos si es un tema de alimentos'
    ]
  },
  'derecho laboral': {
    descripcion: 'Rama del derecho que regula las relaciones entre empleadores y trabajadores, incluyendo despidos, contratos y condiciones laborales.',
    cuandoNecesitas: [
      'Te han despedido injustificadamente',
      'No te han pagado tus beneficios laborales',
      'Necesitas asesor√≠a sobre tu contrato de trabajo',
      'Tienes dudas sobre tus derechos como trabajador',
      'Quieres demandar por acoso laboral'
    ]
  }
  // Add more specialties as needed
};

// Define documents information
const DOCUMENTOS_LEGALES: Record<string, DocumentInfo> = {
  'contrato de arriendo': {
    descripcion: 'Documento legal que regula el arrendamiento de un inmueble entre arrendador y arrendatario',
    requisitos: [
      'Identificaci√≥n legal vigente de ambas partes (c√©dula de identidad o pasaporte)',
      'Rol de aval√∫o fiscal del inmueble',
      'Certificado de dominio vigente del inmueble',
      'Monto del arriendo expresado en UF o pesos chilenos',
      'Forma de pago (transferencia, dep√≥sito, efectivo con boleta)',
      'Plazo m√≠nimo de arriendo (generalmente 1 a√±o en Chile)',
      'Monto y forma de pago del dep√≥sito de garant√≠a',
      'Gastos comunes y contribuciones a cargo de cada parte'
    ],
    consejos: [
      'Exige la revisi√≥n del contrato con 5 d√≠as de anticipaci√≥n',
      'Verifica que el propietario sea efectivamente el due√±o del inmueble',
      'Documenta con fotos el estado del inmueble al inicio y t√©rmino del arriendo',
      'Exige la devoluci√≥n del dep√≥sito dentro de los 30 d√≠as posteriores a la entrega',
      'Verifica cl√°usulas de reajuste seg√∫n IPC'
    ],
    marcoLegal: 'Ley N¬∞ 18.101 sobre Arrendamiento de Predios Urbanos',
    costoAproximado: 'Entre 0.5 y 1.5 UTM + IVA por p√°gina',
    validez: 'Generalmente 1 a√±o, renovable de forma t√°cita'
  },
  // Add more documents as needed
};

interface LegalContext {
  conversationHistory: Array<{role: string, content: string}>;
  userPreferences: {
    location?: string;
    preferredLanguage: string;
    legalNeeds?: string[];
  };
  lastSearch?: {
    type: string;
    results: Array<{
      id: string;
      name: string;
      specialty: string;
      location: string;
      rating: number;
      price: number;
    }>;
    timestamp: number;
  };
}

// Legal knowledge base for better responses
const LEGAL_KNOWLEDGE: {
  areas: string[];
  commonDocs: string[];
  legalAid: string[];
} = {
  areas: [
    'penal', 'civil', 'laboral', 'familiar', 
    'mercantil', 'tributario', 'inmobiliario', 'propiedad intelectual'
  ],
  commonDocs: [
    'contrato de arriendo', 'contrato de trabajo', 'contrato de compraventa', 'contrato', 
    'demanda', 'recurso', 'poder', 'testamento', 'escritura', 'acta', 'certificado', 'notificacion'
  ],
  legalAid: [
    'asistencia legal', 'abogado de oficio', 'defensor√≠a', 'consultor√≠a gratuita'
  ]
};

// Helper functions for generating responses
function generateLawyerResponse(specialty: string, location: string, isFollowUp: boolean): string {
  if (!specialty && !location) {
    return isFollowUp 
      ? 'Aqu√≠ tienes m√°s abogados que podr√≠an ser de tu inter√©s:'
      : '¬øPodr√≠as indicarme qu√© tipo de abogado necesitas y en qu√© ciudad?';
  }
  const specialtyPhrase = specialty ? ` en ${specialty}` : '';
  const locationPhrase = location ? ` en ${location}` : '';
  
  if (isFollowUp) {
    return `Aqu√≠ tienes m√°s abogados${specialtyPhrase}${locationPhrase} que podr√≠an ser de tu inter√©s:`;
  }
  
  const responses = [
    `Perfecto, he encontrado profesionales especializados${specialtyPhrase}${locationPhrase} que podr√≠an ayudarte.`,
    `Aqu√≠ tienes una selecci√≥n de abogados${specialtyPhrase} disponibles${locationPhrase}.`,
    `He localizado expertos${specialtyPhrase}${locationPhrase} que se ajustan a lo que buscas.`
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
}

function generateDocumentResponse(docType: string, prompt: string): string {
  const docInfo = DOCUMENTOS_LEGALES[docType as keyof typeof DOCUMENTOS_LEGALES];
  
  if (docInfo) {
    return `*${docType.charAt(0).toUpperCase() + docType.slice(1)}*\n` +
      `_${docInfo.descripcion}_\n\n` +
      `üìã *Requisitos principales:*\n` +
      docInfo.requisitos.map(r => `‚Ä¢ ${r}`).join('\n') + '\n\n' +
      (docInfo.consejos ? `üí° *Consejos importantes:*\n${docInfo.consejos.map(c => `‚Ä¢ ${c}`).join('\n')}\n\n` : '') +
      `‚öñÔ∏è *Marco legal:* ${docInfo.marcoLegal}\n` +
      `üí∞ *Costo aproximado:* ${docInfo.costoAproximado}\n` +
      `‚è±Ô∏è *Validez:* ${docInfo.validez}`;
  }
  
  return `No tengo informaci√≥n detallada sobre "${docType}". ¬øTe gustar√≠a que busque a un especialista que pueda ayudarte con este documento?`;
}

// Enhanced legal specialty detection with context awareness
function detectEspecialidad(text: string): string {
  const lowerText = text.toLowerCase();
  
  const specialties = [
    { terms: ['penal', 'crimen', 'delito', 'robo', 'hurto', 'homicidio'], value: 'penal' },
    { terms: ['civil', 'contrato', 'da√±os', 'responsabilidad'], value: 'civil' },
    { terms: ['laboral', 'trabajo', 'despido', 'finiquito'], value: 'laboral' },
    { terms: ['familiar', 'divorcio', 'hijo', 'pensi√≥n', 'alimentos'], value: 'familiar' },
    { terms: ['mercantil', 'empresa', 'sociedad', 'comercio'], value: 'mercantil' },
    { terms: ['administrativo', 'gobierno', 'p√∫blico', 'municipal'], value: 'administrativo' },
    { terms: ['tributario', 'impuesto', 'sii', 'tributo'], value: 'tributario' },
    { terms: ['inmobiliario', 'bienes ra√≠ces', 'propiedad', 'hipoteca'], value: 'inmobiliario' },
    { terms: ['propiedad intelectual', 'marca', 'patente', 'derechos de autor'], value: 'propiedad intelectual' }
  ];
  
  const matchedSpecialty = specialties.find(({ terms }) => 
    terms.some(term => lowerText.includes(term))
  );
  
  return matchedSpecialty?.value || '';
}

// Enhanced city detection with common variations
function detectCiudad(text: string): string {
  const lowerText = text.toLowerCase();
  
  const cities = [
    { names: ['santiago', 'stgo', 'santiago centro'], value: 'Santiago' },
    { names: ['valpara√≠so', 'valparaiso', 'vi√±a', 'vi√±a del mar'], value: 'Valpara√≠so' },
    { names: ['concepci√≥n', 'concepcion', 'conce'], value: 'Concepci√≥n' },
    { names: ['la serena', 'coquimbo'], value: 'La Serena' },
    { names: ['antofagasta', 'antofa'], value: 'Antofagasta' },
    { names: ['temuco', 'araucan√≠a'], value: 'Temuco' },
    { names: ['puerto montt', 'puertomontt'], value: 'Puerto Montt' },
    { names: ['punta arenas', 'magallanes'], value: 'Punta Arenas' }
  ];
  
  const matchedCity = cities.find(({ names }) => 
    names.some(name => lowerText.includes(name))
  );
  
  return matchedCity?.value || '';
}

// Interfaz para el resultado del an√°lisis de consulta
interface AnalisisConsulta {
  documento?: string;
  esRequisitos: boolean;
  esCosto: boolean;
  esValidez: boolean;
  esEjemplo: boolean;
  aspectoEspecifico?: string;
  esBusquedaAbogado: boolean;
  esInstruccionSistema: boolean;
  esBusquedaPorCiudad: boolean;
}

// Funci√≥n para analizar la consulta y extraer informaci√≥n relevante
function analizarConsulta(prompt: string, context: LegalContext): AnalisisConsulta {
  const texto = prompt.toLowerCase().trim();
  
  // Detectar si es una instrucci√≥n del sistema o prompt
  const esInstruccionSistema = /(eres un|tu tarea|debes|responder como|mensaje del usuario)/i.test(texto);
  if (esInstruccionSistema) {
    return {
      esInstruccionSistema: true,
      documento: undefined,
      esRequisitos: false,
      esCosto: false,
      esValidez: false,
      esEjemplo: false,
      aspectoEspecifico: undefined,
      esBusquedaAbogado: false,
      esBusquedaPorCiudad: false
    };
  }
  
  // Detectar si es una b√∫squeda de abogado por ciudad (ej: "stgo", "santiago")
  const ciudad = detectCiudad(texto);
  const esBusquedaPorCiudad = ciudad && texto.length <= 20; // B√∫squeda corta que parece ser solo una ciudad
  
  // Detectar tipo de documento solicitado
  const documentos = [
    'contrato de arriendo', 'contrato de trabajo', 'compraventa de veh√≠culo',
    'testamento', 'poder notarial', 'contrato de prestaci√≥n de servicios',
    'contrato de arrendamiento', 'contrato de compraventa', 'contrato de sociedad'
  ];
  
  const documento = documentos.find(doc => texto.includes(doc));
  
  // Detectar intenciones espec√≠ficas
  const esRequisitos = /(qu√© necesito|requisitos|documentos? necesario|qu√© debo llevar)/i.test(texto);
  const esCosto = /(cu√°nto cuesta|precio|valor|cu√°nto sale|cu√°nto vale)/i.test(texto);
  const esValidez = /(cu√°nto dura|v√°lido hasta|vigencia|tiempo de validez)/i.test(texto);
  const esEjemplo = /(ejemplo|modelo|formato|como se hace)/i.test(texto);
  
  // Detectar si es una pregunta sobre un aspecto espec√≠fico del documento
  const aspectoEspecifico = [
    { term: /(dep√≥sito|garant√≠a)/i, tipo: 'deposito' },
    { term: /(plazo|duraci√≥n|tiempo)/i, tipo: 'plazo' },
    { term: /(terminar|finalizar|dar por terminado)/i, tipo: 'termino' },
    { term: /(renovar|pr√≥rroga|extender)/i, tipo: 'renovacion' },
    { term: /(multa|sanci√≥n|penalidad)/i, tipo: 'sanciones' }
  ].find(item => item.term.test(texto))?.tipo;
  
  // Detectar si es una b√∫squeda de abogado
  const contienePalabrasClaveAbogado = /(buscar|necesito|recomienda|contratar|encontrar|abogad[oa]|especialista|abogac√≠a)/i.test(texto);
  const esBusquedaAbogado = contienePalabrasClaveAbogado || esBusquedaPorCiudad;
  
  return {
    documento,
    esRequisitos,
    esCosto,
    esValidez,
    esEjemplo,
    aspectoEspecifico,
    esBusquedaAbogado,
    esInstruccionSistema: false,
    esBusquedaPorCiudad
  };
}

export async function askMistral(
  prompt: string, 
  context: LegalContext = { 
    conversationHistory: [],
    userPreferences: { preferredLanguage: 'es' }
  }
): Promise<string> {
  try {
    // Simular demora de API con variaci√≥n
    await new Promise(resolve => setTimeout(resolve, 600 + Math.random() * 400));
    
    const normalizedPrompt = prompt.toLowerCase();
    const lastMessage = context.conversationHistory[context.conversationHistory.length - 1]?.content || '';
    
    // Analizar la consulta del usuario
    const analisis = analizarConsulta(prompt, context);
    
    // Si es una instrucci√≥n del sistema, devolver respuesta gen√©rica
    if (analisis.esInstruccionSistema) {
      return JSON.stringify({
        tipo: "general",
        especialidad: "",
        ciudad: "",
        respuesta: "Soy un asistente legal dise√±ado para ayudar con consultas legales espec√≠ficas. Por favor, ind√≠came en qu√© necesitas ayuda (por ejemplo, 'Necesito un abogado laboral' o '¬øQu√© necesito para un contrato de arriendo?')."
      });
    }
    
    // Si es una b√∫squeda solo por ciudad
    if (analisis.esBusquedaPorCiudad) {
      const ciudad = detectCiudad(prompt);
      return JSON.stringify({
        tipo: "abogado",
        especialidad: "",
        ciudad: ciudad,
        respuesta: `He detectado que buscas abogados en ${ciudad}. ¬øPodr√≠as indicarme el √°rea de especializaci√≥n que necesitas? Por ejemplo: 'laboral', 'familia', 'penal', etc.`
      });
    }
    
    // Verificar si es una b√∫squeda de abogado
    if (analisis.esBusquedaAbogado || context.lastSearch) {
      const especialidad = detectEspecialidad(prompt) || context.lastSearch?.type || '';
      const ciudad = detectCiudad(prompt) || context.userPreferences.location || '';
      const esSeguimiento = /(m√°s|otr[ao]s?|siguiente|anterior|ver m√°s)/i.test(prompt);
      
      // Si es una especialidad espec√≠fica, dar informaci√≥n detallada
      if (especialidad) {
        const infoEspecialidad = ESPECIALIDADES_LEGALES[especialidad as keyof typeof ESPECIALIDADES_LEGALES];
        if (infoEspecialidad) {
          let respuesta = `*Informaci√≥n sobre ${especialidad}*\n\n`;
          respuesta += `${infoEspecialidad.descripcion}\n\n`;
          
          if (analisis.esRequisitos) {
            respuesta += `*¬øCu√°ndo necesitas un ${especialidad}?*\n`;
            respuesta += infoEspecialidad.cuandoNecesitas.map(item => `‚Ä¢ ${item}`).join('\n') + '\n\n';
          }
          
          if (infoEspecialidad.consejos) {
            respuesta += `*Consejos importantes:*\n`;
            respuesta += infoEspecialidad.consejos.map(c => `‚Ä¢ ${c}`).join('\n') + '\n\n';
          }
          
          respuesta += `¬øTe gustar√≠a que te ayude a encontrar un abogado ${especialidad}${ciudad ? ` en ${ciudad}` : ''}?`;
          
          return JSON.stringify({
            tipo: "abogado",
            especialidad,
            ciudad,
            respuesta
          });
        }
      }
      
      // Respuesta est√°ndar para b√∫squeda de abogados
      return JSON.stringify({
        tipo: "abogado",
        especialidad,
        ciudad,
        respuesta: generateLawyerResponse(especialidad, ciudad, esSeguimiento)
      });
    }
    
    // Si es una consulta sobre un documento espec√≠fico
    if (analisis.documento) {
      const docType = analisis.documento;
      const documentInfo = DOCUMENTOS_LEGALES[docType as keyof typeof DOCUMENTOS_LEGALES];
      
      if (documentInfo) {
        let respuesta = `*${docType.charAt(0).toUpperCase() + docType.slice(1)}*\n`;
        respuesta += `_${documentInfo.descripcion}_\n\n`;
        
        // Responder seg√∫n el tipo de consulta
        if (analisis.esRequisitos || !(analisis.esCosto || analisis.esValidez || analisis.aspectoEspecifico)) {
          respuesta += `üìã *Requisitos principales:*\n`;
          respuesta += documentInfo.requisitos.map(r => `‚Ä¢ ${r}`).join('\n') + '\n\n';
          
          if (documentInfo.consejos) {
            respuesta += `üí° *Consejos importantes:*\n`;
            respuesta += documentInfo.consejos.map(c => `‚Ä¢ ${c}`).join('\n') + '\n\n';
          }
        }
        
        // Informaci√≥n espec√≠fica seg√∫n el aspecto consultado
        if (analisis.aspectoEspecifico === 'deposito' && docType === 'contrato de arriendo') {
          respuesta += `üí∞ *Sobre el dep√≥sito de garant√≠a en arriendos:*\n`;
          respuesta += `‚Ä¢ El dep√≥sito no puede superar el equivalente a una mensualidad de arriendo\n`;
          respuesta += `‚Ä¢ Debe ser devuelto dentro de los 30 d√≠as posteriores a la entrega del inmueble\n`;
          respuesta += `‚Ä¢ El arrendador puede retener el dep√≥sito por da√±os al inmueble no causados por el uso normal\n`;
          respuesta += `‚Ä¢ Se recomienda documentar el estado del inmueble al inicio y t√©rmino del arriendo con fotos\n\n`;
        }
        
        if (analisis.esCosto || analisis.aspectoEspecifico === 'costo') {
          respuesta += `üí∞ *Costo aproximado:* ${documentInfo.costoAproximado}\n`;
          if (docType === 'contrato de arriendo') {
            respuesta += `  _Nota: El costo puede variar seg√∫n la complejidad y el profesional que lo realice._\n`;
          }
          respuesta += '\n';
        }
        
        if (analisis.esValidez || analisis.aspectoEspecifico === 'plazo') {
          respuesta += `‚è±Ô∏è *Validez:* ${documentInfo.validez}\n`;
          if (docType === 'contrato de arriendo') {
            respuesta += `  _Nota: El plazo m√≠nimo legal es de 1 a√±o, pero puedes acordar un plazo mayor._\n`;
          }
          respuesta += '\n';
        }
        
        // Informaci√≥n legal y cierre
        respuesta += `‚öñÔ∏è *Marco legal:* ${documentInfo.marcoLegal}\n\n`;
        
        // Sugerir siguientes pasos
        const sugerencias = [];
        if (!analisis.esCosto) sugerencias.push('conocer los costos asociados');
        if (!analisis.esValidez) sugerencias.push('saber sobre su validez');
        if (!analisis.aspectoEspecifico) sugerencias.push('informaci√≥n m√°s espec√≠fica');
        
        if (sugerencias.length > 0) {
          respuesta += `¬øTe gustar√≠a ${sugerencias.join(', ')} o necesitas ayuda con algo m√°s?`;
        } else {
          respuesta += `¬øEn qu√© m√°s puedo ayudarte sobre este documento?`;
        }
        
        return JSON.stringify({
          tipo: "documento",
          especialidad: detectEspecialidad(prompt) || "",
          ciudad: "",
          respuesta
        });
      }
      
      // Si no se encontr√≥ informaci√≥n detallada del documento
      return JSON.stringify({
        tipo: "documento",
        especialidad: "",
        ciudad: "",
        respuesta: `Entiendo que necesitas informaci√≥n sobre ${docType}. ` +
          `Para ayudarte mejor, ¬øpodr√≠as especificar si necesitas saber sobre requisitos, costos, validez o alg√∫n aspecto en particular?`
      });
    }
    
    // Si es una solicitud de asistencia legal
    if (LEGAL_KNOWLEDGE.legalAid.some(term => normalizedPrompt.includes(term))) {
      const ciudad = detectCiudad(prompt);
      let respuesta = "*Asistencia Legal Gratuita*\n\n";
      
      respuesta += "Existen varias opciones para obtener asesor√≠a legal gratuita en Chile:\n\n";
      respuesta += "1. *Corporaci√≥n de Asistencia Judicial (CAJ)*: Ofrece defensa penal y asesor√≠a en materias de familia.\n";
      respuesta += "2. *Defensor√≠a Penal P√∫blica*: Para casos penales cuando no puedes pagar un abogado.\n";
      respuesta += "3. *Cl√≠nicas Jur√≠dicas Universitarias*: Muchas universidades ofrecen asesor√≠a gratuita a la comunidad.\n";
      respuesta += "4. *Oficinas de Protecci√≥n de Derechos (OPD)*: Para casos de familia y menores de edad.\n\n";
      
      if (ciudad) {
        respuesta += `Puedo ayudarte a encontrar opciones espec√≠ficas en ${ciudad}. `;
      } else {
        respuesta += "¬øEn qu√© ciudad o comuna te encuentras? As√≠ puedo darte informaci√≥n m√°s precisa.\n\n";
      }
      
      respuesta += "¬øTe gustar√≠a que te ayude a encontrar asistencia legal gratuita cerca de tu ubicaci√≥n?";
      
      return JSON.stringify({
        tipo: "asistencia",
        especialidad: "",
        ciudad: ciudad || "",
        respuesta
      });
    }
    
    // Si no se pudo determinar la intenci√≥n, pedir aclaraci√≥n
    const sugerencias = [
      "¬øNecesitas ayuda con alg√∫n documento legal en particular?",
      "¬øEst√°s buscando un abogado especializado en alg√∫n √°rea espec√≠fica?",
      "¬øTienes alguna consulta sobre tr√°mites legales?",
      "¬øNecesitas informaci√≥n sobre asistencia legal gratuita?"
    ];
    
    const sugerenciaAleatoria = sugerencias[Math.floor(Math.random() * sugerencias.length)];
    
    return JSON.stringify({
      tipo: "general",
      especialidad: "",
      ciudad: "",
      respuesta: `Disculpa, no estoy seguro de c√≥mo ayudarte con "${prompt}". ${sugerenciaAleatoria}`
    });
    
  } catch (error) {
    console.error('Error in askMistral:', error);
    return JSON.stringify({
      tipo: "error",
      especialidad: "",
      ciudad: "",
      respuesta: "Lo siento, he tenido un problema al procesar tu solicitud. Por favor, int√©ntalo de nuevo m√°s tarde."
    });
  }
}